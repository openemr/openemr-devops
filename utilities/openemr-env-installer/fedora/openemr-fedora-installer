#!/bin/bash
# Function: Install the base services, e.g. git docker docker-compose and openemr-cmd
# The script support fedora30 and fedora31.
CODE_LOCATION=$1
GITHUB_ACCOUNT=$2
MAJOR_RELEASE=$(cat /etc/redhat-release | awk '{print $3}')

git_clone_function(){
    CODE_LOCATION=$1
    GITHUB_ACCOUNT=$2
    cd ${CODE_LOCATION} && [ `pwd` != "${CODE_LOCATION}" ] && cd ${CODE_LOCATION}
    echo -e "\033[30m===>\033[0m \033[32mDownloading OpenEMR repository... \033[0m"
    echo ''
    git clone https://github.com/${GITHUB_ACCOUNT}/openemr.git
    cd ${CODE_LOCATION}/openemr && [ `pwd` != "${CODE_LOCATION}/openemr" ] && cd ${CODE_LOCATION}/openemr
    git remote add upstream https://github.com/openemr/openemr.git
    git fetch upstream
    echo ''
    echo -e "\033[30m===>\033[0m \033[32mPulling the latest data... \033[0m"
    echo ''
    git pull upstream master
    echo ''
}

# Check major release
RELEASE_CODE=12
USER_CODE=13
EXIT_CODE=11
if [ "$MAJOR_RELEASE" -lt "30" ] || [ "$MAJOR_RELEASE" -gt "31" ]
then
	echo 'The script only supports fedora30 and fedora31.'
	exit $RELEASE_CODE
# Run with root
elif [ "$UID" -ne 0 ]
then
	echo 'Please run with the root user.'
	exit $USER_CODE
# Script Usage
elif [ $# -ne 2 ]
then
    echo "Usage: bash `basename $0` <code location> <github account>"
	echo ''
    echo "  e.g. bash `basename $0` /var/www testuser"
	echo ''
    echo -e "\033[33mNOTE: Please make sure you have created your own fork of OpenEMR at first.\033[0m"
    exit $EXIT_CODE
fi

# Install git
INSTALL_FAIL_CODE=15
which git &>/dev/null
if [ $? -ne 0 ]
then
	echo -e "\033[30m===>\033[0m \033[32mInstalling git... \033[0m"
	echo ''
    dnf install git -y
    [ $? -ne 0 ] && echo '' && echo -e "\e[31mInstalled failed, please check the repo file and the network.\e[0m" && exit $INSTALL_FAIL_CODE
	echo ''
else
	echo -e "\033[30m===>\033[0m \033[32mGit is already installed. \033[0m"
	echo ''
fi

# Clone code to local
if [ ! -d ${CODE_LOCATION} ]
then
    mkdir -p ${CODE_LOCATION}
    git_clone_function $1 $2
elif [ ! -d ${CODE_LOCATION}/openemr ]
then
    git_clone_function $1 $2
else
    echo -e "\033[30m===>\033[0m \033[32mOpenEMR repo is already downloaded. \033[0m"
    echo ''
fi

# Install docker
which docker &>/dev/null
if [ $? -ne 0 ]
then
 	echo -e "\033[30m===>\033[0m \033[32mDownloading docker-ce repo... \033[0m"
	echo ''
    curl -o /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/fedora/docker-ce.repo &>/dev/null
	echo -e "\033[30m===>\033[0m \033[32mInstalling docker-ce docker-ce-cli containerd.io... \033[0m"
	echo ''
	dnf install docker-ce docker-ce-cli containerd.io -y
	systemctl start docker
	systemctl enable docker
	echo ''
else
	echo -e "\033[30m===>\033[0m \033[32mDocker is already installed. \033[0m"
    systemctl start docker
    systemctl enable docker
	echo ''
fi

# Install docker-compose
which docker-compose &>/dev/null
if [ $? -ne 0 ]
then
	echo -e "\033[30m===>\033[0m \033[32mInstalling docker-compose... \033[0m"
	echo ''
	dnf update -y
	curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	chmod +x /usr/local/bin/docker-compose
	echo ''
else
	echo -e "\033[30m===>\033[0m \033[32mDocker-compose is already installed. \033[0m"
	echo ''
fi

# Install openemr-cmd
which openemr-cmd &>/dev/null
if [ $? -ne 0 ]
then
	echo -e "\033[30m===>\033[0m \033[32mInstalling openemr-cmd... \033[0m"
    echo ''
	curl -L https://raw.githubusercontent.com/openemr/openemr-devops/master/utilities/openemr-cmd/openemr-cmd -o /usr/local/bin/openemr-cmd
	chmod +x /usr/local/bin/openemr-cmd
	echo ''
else
	echo -e "\033[30m===>\033[0m \033[32mOpenEMR-cmd is already installed. \033[0m"
	echo ''
fi

# Get the value after started docker
DOCKER_STATUS=$(systemctl is-active docker)
# Check the installation result
echo '*****************Quick Check*****************'
git --version
docker --version
docker-compose --version
openemr-cmd --version
echo -e "\033[36mThe docker status: \033[0m\033[32m${DOCKER_STATUS} \033[0m"
echo '*********************************************'
echo ''

# Startup env
echo '*****************************Startup Env*****************************'
echo -e "\033[34m==>\033[0mRun the below command to startup \033[33measy env\033[0m."
echo -e "\033[32mcd ${CODE_LOCATION}/openemr && openemr-cmd up\033[0m"
echo -e "\033[34m==>\033[0mOr run the below command to startup \033[33minsane env\033[0m."
echo -e "\033[32mcd ${CODE_LOCATION}/openemr/contrib/util/docker && openemr-cmd up\033[0m"
echo '*********************************************************************'
