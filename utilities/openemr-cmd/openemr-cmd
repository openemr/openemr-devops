#!/bin/bash
################################################################################################
# Function  : Manage the docker command line
# Version   : See below --version section
# Copyright : Copyright (c) 2020 Reid Liu <guliu@redhat.com>
# Author    : Reid Liu <guliu@redhat.com>
# License   : https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3
#################################################################################################

DOCKER_EXEC_CMD='docker exec -i'                                 # docker exec command
CONTAINER_ID=$(docker ps | grep _openemr | cut -f 1 -d " ")      # get the container id
SHELL_TYPE='sh -c'                                               # specify shell type
FIRST_ARG=$1											         # define the first parameter

check_docker_compose_install_or_not(){
	DOCKER_COMPOSE_CODE=22
	which docker-compose &>/dev/null
	[ $? -ne 0 ] && echo "Please check docker-compose install or not." && exit $DOCKER_COMPOSE_CODE
}

quick_open_a_docker_shell(){
	docker exec -it $CONTAINER_ID sh
}

refresh_page_or_iframe() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools build-themes'
}

check_php_error_logs() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools php-log'
}

check_docker_log() {
  docker logs $CONTAINER_ID
}

create_psr12_code_styling_issues_report() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools psr12-report'
}

fix_psr12_code_styling_issues() {
	 $DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools psr12-fix'
}

create_theme_styling_issues_report() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools lint-themes-report'
}

fix_theme_styling_issues() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools lint-themes-fix'
}

check_php_parsing_errors() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools php-parserror'
}

run_unit_testing() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools unit-test'
}

run_api_testing() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools api-test'
}

run_e2e_testing() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools e2e-test'
}

run_services_testing() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools services-test'
}

run_fixtures_testing() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools fixtures-test'
}

run_validators_testing() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools validators-test'
}

run_controllers_testing() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools controllers-test'
}

run_common_testing() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools common-test'
}

run_the_entire_dev_tool_suite() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools clean-sweep'
}

run_only_all_the_autmated_tests() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools clean-sweep-tests'
}

reset_openemr_only() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools dev-reset'
}

reset_and_reinstall_openemr() {
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools dev-reset-install'
}

reset_and_reinstall_openemr_with_demodata(){
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools dev-reset-install-demodata'
}

creat_a_backup_snapshot(){
    BACKUP_FILE=$1
    BACKUP_FILE_CODE=20
    if [ $# != 1 ]
    then
		echo 'Please provide a snapshot name.'
		echo 'e.g. openemr-cmd backup-snapshot example'
		exit $BACKUP_FILE_CODE
	else
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "/root/devtools backup $BACKUP_FILE"
	fi
}

restore_from_a_snapshot(){
    BACKUP_FILE=$1
    BACKUP_FILE_CODE=21
    if [ $# != 1 ]
    then
        echo 'Please provide a restore snapshot name.'
        echo 'e.g. openemr-cmd restore-snapshot example'
        exit $BACKUP_FILE_CODE
    else
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "/root/devtools restore $BACKUP_FILE"
	fi
}

list_the_snapshot(){
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools list-snapshots'
}

list_the_capsules(){
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools list-capsules'
}

copy_capsule_from_docker_to_host(){
	BACKUP_FILE=$1
	BACKUP_HOST_DIR=$2 #optional parameter
	BACKUP_FILE_CODE=19
	if [ $# != 1 ] && [ $# != 2 ]
	then
		echo 'Please provide the capsule name.'
		echo 'e.g. openemr-cmd get-capsule example.tgz'
		echo 'An optional setting is the path to save to. If nothing provided, then will save in current directory.'
		echo 'e.g. openemr-cmd get-capsule example.tgz /path/to/save'
		exit $BACKUP_FILE_CODE
	else
	  if [ -z "$BACKUP_HOST_DIR" ]
	  then
		  docker cp $(docker ps | grep _openemr | cut -f 1 -d " "):/snapshots/$BACKUP_FILE .
    else
      docker cp $(docker ps | grep _openemr | cut -f 1 -d " "):/snapshots/$BACKUP_FILE "${BACKUP_HOST_DIR}/"
    fi
	fi
}

copy_capsule_from_host_to_docker(){
	# Need a capsule parameter
	BACKUP_FILE=$1
	CP_CAP_DIR_DKR_CODE=15
	BACKUP_FILE_CODE=18
	if [ $# != 1 ]
	then
		echo 'Please provide the capsule file name (including path if applicable).'
		echo 'e.g. openemr-cmd put-capsule example.tgz'
		exit $BACKUP_FILE_CODE
	else
		ls $BACKUP_FILE  &>/dev/null
		if [ $? -ne 0 ]
		then
			echo 'Please check whether the capsule file exists or not'
			exit $CP_CAP_DIR_DKR_CODE
		else
			docker cp $BACKUP_FILE  $(docker ps | grep _openemr | cut -f 1 -d " "):/snapshots/
		fi
	fi
}

ensure_current_ver_with_upgrade_ver(){
  # Need a version parameter
  UPGRADE_FROM_VERSION=$1
  BACKUP_FILE_CODE=22
	if [ $# != 1 ]
	then
		echo 'Please provide the OpenEMR version to upgrade database from.'
		echo 'e.g. openemr-cmd ensure-version 5.0.2'
		exit $BACKUP_FILE_CODE
	else
    $DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "/root/devtools upgrade ${UPGRADE_FROM_VERSION}"
	fi
}

turn_on_support_for_multisite(){
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools enable-multisite'
}

turn_off_support_for_multisite(){
	$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE '/root/devtools disable-multisite'
}

change_db_character_set_and_collation(){
	CHARACTER_SET_COLLATION_CODE=17
	if [ $# != 2 ]
	then
		echo 'Please provide two parameters.'
		echo 'e.g. openemr-cmd encoding-collation utf8mb4 utf8mb4_general_ci'
		echo '     openemr-cmd encoding-collation utf8mb4 utf8mb4_unicode_ci'
		echo '     openemr-cmd encoding-collation utf8mb4 utf8mb4_vietnamese_ci'
		echo '     openemr-cmd encoding-collation utf8 utf8_general_ci'
		exit $CHARACTER_SET_COLLATION_CODE
	else
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "/root/devtools change-encoding-collation $1 $2"
	fi
}

USAGE_EXIT_CODE=13
FINAL_EXIT_CODE=0

# Confirm the docker install or not.
DOCKER_CODE=16
which docker &>/dev/null
[ $? -ne 0 ] && echo "Please check docker install or not." && exit $DOCKER_CODE

# Script usage.
if [ $# -eq 0 ] || [ "$FIRST_ARG" == '--help' ]
then
  echo "Usage: `basename $0` COMMAND [ARGS]"
  echo 'Commands:'
  echo "  --help                       Show the commands usage"
  echo "  --version                    Show the openemr-cmd command version"
  echo "  up                           Execute: docker-compose up -d"
  echo "  down                         Execute: docker-compose down -v"
  echo "  start                        Execute: docker-compose start"
  echo "  stop                         Execute: docker-compose stop"
  echo "  shell                        Open a docker shell quickly"
  echo "  build-themes                 Make changes to any files on your local file system"
	echo "  php-log                      To check PHP error logs"
	echo "  docker-log                   To check docker log"
	echo "  psr12-report                 To create a report of PSR12 code styling issues"
	echo "  psr12-fix                    To fix PSR12 code styling issues"
	echo "  lint-themes-report           To create a report of theme styling issues"
	echo "  lint-themes-fix              To fix theme styling issues"
	echo "  php-parserror                To check PHP parsing errors"
	echo "  unit-test                    To run unit testing"
	echo "  api-test                     To run api testing"
	echo "  e2e-test                     To run e2e testing"
	echo "  services-test                To run services testing"
	echo "  fixtures-test                To run fixtures testing"
	echo "  validators-test              To run validators testing"
	echo "  controllers-test             To run controllers testing"
	echo "  common-test                  To run common testing"
	echo "  clean-sweep                  To run the entire dev tool suite"
	echo "  clean-sweep-tests            To run only all the automated tests"
	echo "  dev-reset                    To reset OpenEMR only"
	echo "  dev-reset-install            To reset and reinstall OpenEMR"
	echo "  dev-reset-install-demodata   To reset and reinstall OpenEMR with demo data"
	echo "  backup-snapshot              Create a backup snapshot"
	echo "  restore-snapshot             Restore from a snapshot"
	echo "  list-snapshots               To list the snapshots"
	echo "  list-capsules                List the capsules"
	echo "  get-capsule                  Copy the capsule from the docker to your host directory"
	echo "  put-capsule                  Copy the capsule into the docker"
	echo "  ensure-version               Upgrade OpenEMR from specified old version to current version"
	echo "  enable-multisite             Turn on support for multisite"
	echo "  disable-multisite            Turn off support for multisite"
	echo "  encoding-collation           Change the database character set and collation"
	exit $USAGE_EXIT_CODE
elif [ "$FIRST_ARG" == '--version' ]
then
	echo "openemer-cmd version 1.0.1, build 2020-07-17"
fi

# See how we were called.
case "$FIRST_ARG" in
	up)
		check_docker_compose_install_or_not
		docker-compose up -d
		;;
	down)
		check_docker_compose_install_or_not
		docker-compose down -v
		;;
	stop)
		check_docker_compose_install_or_not
		docker-compose stop
		;;
	start)
		check_docker_compose_install_or_not
		docker-compose start
		;;
	shell)
		quick_open_a_docker_shell
		;;
	build-themes)
		refresh_page_or_iframe
		;;
	php-log)
		check_php_error_logs
		;;
	docker-log)
		check_docker_log
		;;
	psr12-report)
		create_psr12_code_styling_issues_report
		;;
	psr12-fix)
		fix_psr12_code_styling_issues
		;;
	lint-themes-report)
		create_theme_styling_issues_report
		;;
	lint-themes-fix)
		fix_theme_styling_issues
		;;
	php-parserror)
		check_php_parsing_errors
		;;
	unit-test)
		run_unit_testing
		;;
	api-test)
		run_api_testing
		;;
	e2e-test)
		run_e2e_testing
		;;
	services-test)
		run_services_testing
		;;
	fixtures-test)
		run_fixtures_testing
		;;
	validators-test)
		run_validators_testing
		;;
	controllers-test)
		run_controllers_testing
		;;
	common-test)
		run_common_testing
		;;
	clean-sweep)
		run_the_entire_dev_tool_suite
		;;
	clean-sweep-tests)
		run_only_all_the_autmated_tests
		;;
	dev-reset)
		reset_openemr_only
		;;
	dev-reset-install)
		reset_and_reinstall_openemr
		;;
	dev-reset-install-demodata)
		reset_and_reinstall_openemr_with_demodata
		;;
	backup-snapshot)
		creat_a_backup_snapshot $2
		;;
	restore-snapshot)
		restore_from_a_snapshot $2
		;;
	list-snapshots)
		list_the_snapshot
		;;
	list-capsules)
		list_the_capsules
		;;
	get-capsule)
		copy_capsule_from_docker_to_host $2 $3
		;;
	put-capsule)
		copy_capsule_from_host_to_docker $2
		;;
	ensure-version)
		ensure_current_ver_with_upgrade_ver $2
		;;
	enable-multisite)
		turn_on_support_for_multisite
		;;
	disable-multisite)
		turn_off_support_for_multisite
		;;
	encoding-collation)
		change_db_character_set_and_collation $2 $3
		;;
esac
exit $FINAL_EXIT_CODE
